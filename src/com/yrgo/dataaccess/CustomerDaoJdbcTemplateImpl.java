package com.yrgo.dataaccess;

import com.yrgo.domain.Call;
import com.yrgo.domain.Customer;
import org.springframework.dao.DataAccessException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

//@Repository
public class CustomerDaoJdbcTemplateImpl implements CustomerDao{
    private static final String DELETE_SQL = "DELETE FROM CUSTOMER WHERE CUSTOMER_ID=?";
    private static final String UPDATE_SQL = "UPDATE CUSTOMER SET COMPANY_NAME=?, EMAIL=?, TELEPHONE=?, NOTES=? WHERE CUSTOMER_ID=?";
    private static final String INSERT_SQL = "INSERT INTO CUSTOMER (CUSTOMER_ID, COMPANY_NAME, EMAIL, TELEPHONE, NOTES) VALUES (?,?,?,?,?)";
    private static final String GET_CUSTOMER_BY_ID_SQL = "SELECT * FROM CUSTOMER WHERE CUSTOMER_ID = ?";
    private static final String GET_CUSTOMER_BY_NAME_SQL = "SELECT * FROM CUSTOMER WHERE COMPANY_NAME = ?";
    private static final String CREATE_CUSTOMER_TABLE_SQL = """
        CREATE TABLE CUSTOMER (
            CUSTOMER_ID VARCHAR(50) PRIMARY KEY,
            COMPANY_NAME VARCHAR(100),
            EMAIL VARCHAR(100),
            TELEPHONE VARCHAR(15),
            NOTES VARCHAR(255)
        )
    """;
    private static final String CREATE_CALLS_TABLE_SQL = """
        CREATE TABLE CALLS (
            ID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            CUSTOMER_ID VARCHAR(50),
            TIME_AND_DATE TIMESTAMP,
            NOTES VARCHAR(255),
            FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID)
        )
    """;
    private static final String INSERT_CALL_SQL = "INSERT INTO CALLS (CUSTOMER_ID, TIME_AND_DATE, NOTES) VALUES (?,?,?)";
    private static final String GET_CUSTOMER_CALLS = "SELECT * FROM CALLS WHERE CUSTOMER_ID = ?";

    private JdbcTemplate template;

    public CustomerDaoJdbcTemplateImpl(JdbcTemplate template){
        this.template = template;

        try{
            createTables();
        } catch (Exception e) {
            System.err.println("Table already exists");
        }
    }

    private void createTables(){
        try{
            this.template.execute(CREATE_CUSTOMER_TABLE_SQL);
            this.template.execute(CREATE_CALLS_TABLE_SQL);
            System.out.println("Tables created successfully");
        } catch (org.springframework.jdbc.BadSqlGrammarException e){
            System.out.println("Assuming the tables already exist or cannot be created due to SQL error");
        }
    }

    @Override
    public void create(Customer customer) {
        template.update(INSERT_SQL,
                customer.getCustomerId(),
                customer.getCompanyName(),
                customer.getEmail(),
                customer.getTelephone(),
                customer.getNotes());

    }

    @Override
    public Customer getById(String customerId) throws RecordNotFoundException {
        try{
        return this.template.queryForObject(GET_CUSTOMER_BY_ID_SQL, new CustomerRowMapper(), customerId);
        } catch (EmptyResultDataAccessException e){
            throw new RecordNotFoundException();
        }
    }

    @Override
    public List<Customer> getByName(String companyName) {
        return template.query(GET_CUSTOMER_BY_NAME_SQL, new CustomerRowMapper(), companyName);
    }

    @Override
    public void update(Customer customerToUpdate) throws RecordNotFoundException {
        try{
        this.template.update(UPDATE_SQL,
                customerToUpdate.getCompanyName(),
                customerToUpdate.getEmail(),
                customerToUpdate.getTelephone(),
                customerToUpdate.getNotes(),
                customerToUpdate.getCalls(),
                customerToUpdate.getCustomerId());
        } catch (DataAccessException e) {
            System.out.println("Could not update customer: " + customerToUpdate.getCustomerId() + " {" + e + "}");
        }
    }

    @Override
    public void delete(Customer oldCustomer) throws RecordNotFoundException {
        try{
            this.template.update(DELETE_SQL, oldCustomer.getCustomerId());
        } catch(EmptyResultDataAccessException e){
            throw new RecordNotFoundException();
        }
    }

    @Override
    public List<Customer> getAllCustomers() {
        return template.query("SELECT * FROM CUSTOMER", new CustomerRowMapper());
    }

    @Override
    public Customer getFullCustomerDetail(String customerId) throws RecordNotFoundException {
        Customer customer = getById(customerId);
        if(customer == null){
            throw new RecordNotFoundException();
        }

        List<Call> calls = template.query(
                GET_CUSTOMER_CALLS,
                new CallRowMapper()
        );

        customer.setCalls(calls);
        return customer;

    }

    @Override
    public void addCall(Call newCall, String customerId) throws RecordNotFoundException {
        int rowsAffected = template.update(INSERT_CALL_SQL,
                customerId,
                newCall.getTimeAndDate(),
                newCall.getNotes());

        if(rowsAffected == 0){
            throw new RecordNotFoundException();
        }
    }
}

class CustomerRowMapper implements RowMapper<Customer> {

    @Override
    public Customer mapRow(ResultSet rs, int i) throws SQLException {
        String customerId = rs.getString(1);
        String companyName = rs.getString(2);
        String email = rs.getString(3);
        String telephone = rs.getString(4);
        String notes = rs.getString(5);

        return new Customer( customerId, companyName, email, telephone, notes);
    }
}

class CallRowMapper implements RowMapper<Call> {

    @Override
    public Call mapRow(ResultSet rs, int i) throws SQLException {
        Date timeAndDate = rs.getDate(2);
        String notes = rs.getString(3);

        return new Call(notes, timeAndDate);
    }
}
